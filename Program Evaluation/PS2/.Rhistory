control = lmeControl(opt = "optim",
maxIter = 200))
}, silent = TRUE)
# If that fails, try random intercept only
if (inherits(model, "try-error")) {
model <- try({
lme(BA ~ Age_c + Age_squared_c,
random = ~ 1 | playerID,
weights = varFixed(~ I(1/AB)),
data = data,
method = "REML",
control = lmeControl(opt = "optim"))
}, silent = TRUE)
if (inherits(model, "try-error")) {
stop("Unable to fit any model specification")
}
}
return(model)
}
return(full_model)
}
# Function to calculate peak age
calculate_peak_age <- function(model, data) {
fixed_effects <- fixed.effects(model)
beta_age <- fixed_effects["Age_c"]
beta_age2 <- fixed_effects["Age_squared_c"]
# Check if parabola opens downward (necessary for maximum)
if (beta_age2 >= 0) {
warning("Model suggests no peak age (parabola opens upward)")
return(NA)
}
peak_age <- -beta_age / (2 * beta_age2) + mean(data$Age)
return(peak_age)
}
# Function to create visualization
create_ba_plot <- function(model, data, peak_age) {
require(ggplot2)
# Create prediction data
age_range <- seq(min(data$Age), max(data$Age), by = 0.1)
age_range_c <- age_range - mean(data$Age)
age_squared_c <- age_range^2 - mean(data$Age_squared)
fixed_effects <- fixed.effects(model)
predicted_ba <- fixed_effects["(Intercept)"] +
fixed_effects["Age_c"] * age_range_c +
fixed_effects["Age_squared_c"] * age_squared_c
# Create plot
p <- ggplot() +
geom_line(data = data.frame(Age = age_range, BA = predicted_ba),
aes(x = Age, y = BA),
color = "red", linewidth = 1) +
geom_point(data = data,
aes(x = Age, y = BA, size = sqrt(AB)),
alpha = 0.1) +
labs(
title = "MLB Batting Average vs Age",
subtitle = paste("Population Average Curve (Red)",
ifelse(!is.na(peak_age),
paste("Peak Age:", round(peak_age, 2)),
"No Clear Peak Age")),
x = "Age",
y = "Batting Average",
size = "√At Bats"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
if (!is.na(peak_age)) {
p <- p + geom_vline(xintercept = peak_age,
linetype = "dashed",
color = "blue")
}
return(p)
}
# Main analysis function
analyze_batting_age <- function(mlb_data) {
# Clean and prepare data
clean_data <- clean_mlb_data(mlb_data)
clean_data <- compute_age_vars(clean_data)
# Fit model
model <- fit_mixed_model(clean_data)
# Calculate peak age
peak_age <- calculate_peak_age(model, clean_data)
# Create visualization
plot <- create_ba_plot(model, clean_data, peak_age)
# Return results
return(list(
model = model,
peak_age = peak_age,
plot = plot
))
}
# Usage
results <- analyze_batting_age(mlb_data)
# Function to validate and preprocess data
clean_mlb_data <- function(data) {
# Check if required columns exist
required_cols <- c("playerID", "AB", "Age", "BA")
missing_cols <- setdiff(required_cols, names(data))
if (length(missing_cols) > 0) {
stop("Missing required columns: ", paste(missing_cols, collapse = ", "))
}
# Remove observations with missing values
data <- na.omit(data)
# Remove observations with zero or negative AB
data <- data[data$AB > 0, ]
# Check if we have enough data
if (nrow(data) < 10) {
stop("Insufficient data after cleaning")
}
return(data)
}
# Function to compute age variables
compute_age_vars <- function(data) {
# Center Age
data$Age_c <- scale(data$Age, scale = FALSE)
# Compute and center Age_squared
data$Age_squared <- data$Age^2
data$Age_squared_c <- scale(data$Age_squared, scale = FALSE)
return(data)
}
# Function to fit mixed model with error handling
fit_mixed_model <- function(data) {
# Load required packages
require(nlme)
# Try fitting the full model first
full_model <- try({
lme(BA ~ Age_c + Age_squared_c,
random = list(playerID = pdDiag(~ Age_c + Age_squared_c)),
weights = varFixed(~ I(1/AB)),
data = data,
method = "REML",
control = lmeControl(opt = "optim",
maxIter = 200,
msMaxIter = 200,
returnObject = TRUE))
}, silent = TRUE)
# If full model fails, try simpler models
if (inherits(full_model, "try-error")) {
# Try random intercept and slope
model <- try({
lme(BA ~ Age_c + Age_squared_c,
random = list(playerID = pdDiag(~ Age_c)),
weights = varFixed(~ I(1/AB)),
data = data,
method = "REML",
control = lmeControl(opt = "optim",
maxIter = 200))
}, silent = TRUE)
# If that fails, try random intercept only
if (inherits(model, "try-error")) {
model <- try({
lme(BA ~ Age_c + Age_squared_c,
random = ~ 1 | playerID,
weights = varFixed(~ I(1/AB)),
data = data,
method = "REML",
control = lmeControl(opt = "optim"))
}, silent = TRUE)
if (inherits(model, "try-error")) {
stop("Unable to fit any model specification")
}
}
return(model)
}
return(full_model)
}
# Function to calculate peak age
calculate_peak_age <- function(model, data) {
fixed_effects <- fixed.effects(model)
beta_age <- fixed_effects["Age_c"]
beta_age2 <- fixed_effects["Age_squared_c"]
# Check if parabola opens downward (necessary for maximum)
if (beta_age2 >= 0) {
warning("Model suggests no peak age (parabola opens upward)")
return(NA)
}
peak_age <- -beta_age / (2 * beta_age2) + mean(data$Age)
return(peak_age)
}
# Function to create visualization
create_ba_plot <- function(model, data, peak_age) {
require(ggplot2)
# Create prediction data
age_range <- seq(min(data$Age), max(data$Age), by = 0.1)
age_range_c <- age_range - mean(data$Age)
age_squared_c <- age_range^2 - mean(data$Age_squared)
fixed_effects <- fixed.effects(model)
predicted_ba <- fixed_effects["(Intercept)"] +
fixed_effects["Age_c"] * age_range_c +
fixed_effects["Age_squared_c"] * age_squared_c
# Create plot
p <- ggplot() +
geom_line(data = data.frame(Age = age_range, BA = predicted_ba),
aes(x = Age, y = BA),
color = "red", linewidth = 1) +
geom_point(data = data,
aes(x = Age, y = BA, size = sqrt(AB)),
alpha = 0.1) +
labs(
title = "MLB Batting Average vs Age",
subtitle = paste("Population Average Curve (Red)",
ifelse(!is.na(peak_age),
paste("Peak Age:", round(peak_age, 2)),
"No Clear Peak Age")),
x = "Age",
y = "Batting Average",
size = "√At Bats"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
if (!is.na(peak_age)) {
p <- p + geom_vline(xintercept = peak_age,
linetype = "dashed",
color = "blue")
}
return(p)
}
# Main analysis function
analyze_batting_age <- function(mlb_data) {
# Clean and prepare data
clean_data <- clean_mlb_data(mlb_data)
clean_data <- compute_age_vars(clean_data)
# Fit model
model <- fit_mixed_model(clean_data)
# Calculate peak age
peak_age <- calculate_peak_age(model, clean_data)
# Create visualization
plot <- create_ba_plot(model, clean_data, peak_age)
# Return results
return(list(
model = model,
peak_age = peak_age,
plot = plot
))
}
# Usage
results <- analyze_batting_age(mlb_data)
mlb_data$BA <- mlb_data$H / mlb_data$AB
mlb_data$Age_squared <- mlb_data$Age^2
quad_model <- lm(BA ~ Age + Age_squared,
data = mlb_data,
weights = AB)
summary(quad_model)
beta_age <- coef(quad_model)[2]
beta_age2 <- coef(quad_model)[3]
peak_age <- -beta_age / (2 * beta_age2)
cat("\nPeak batting average occurs at age:", round(peak_age, 2))
age_range <- seq(min(mlb_data$Age), max(mlb_data$Age), by = 0.1)
predicted_ba <- predict(quad_model,
newdata = data.frame(Age = age_range,
Age_squared = age_range^2))
ggplot(mlb_data, aes(x = Age, y = BA)) +
geom_point(alpha = 0.1, aes(size = AB)) +  # Raw data points, sized by AB
geom_line(data = data.frame(Age = age_range, BA = predicted_ba),
color = "red", size = 1) +  # Fitted curve
geom_vline(xintercept = peak_age, linetype = "dashed", color = "blue") +  # Peak age
labs(
title = "Batting Average vs Age with Quadratic Fit",
x = "Age",
y = "Batting Average",
size = "At Bats"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
# Function to validate and preprocess data
clean_mlb_data <- function(data) {
# Check if required columns exist
required_cols <- c("playerID", "AB", "Age", "BA")
missing_cols <- setdiff(required_cols, names(data))
if (length(missing_cols) > 0) {
stop("Missing required columns: ", paste(missing_cols, collapse = ", "))
}
# Remove observations with missing values
data <- na.omit(data)
# Remove observations with zero or negative AB
data <- data[data$AB > 0, ]
# Check if we have enough data
if (nrow(data) < 10) {
stop("Insufficient data after cleaning")
}
return(data)
}
# Function to compute age variables
compute_age_vars <- function(data) {
# Center Age
data$Age_c <- scale(data$Age, scale = FALSE)
# Compute and center Age_squared
data$Age_squared <- data$Age^2
data$Age_squared_c <- scale(data$Age_squared, scale = FALSE)
return(data)
}
# Function to fit mixed model with error handling
fit_mixed_model <- function(data) {
# Load required packages
require(nlme)
# Try fitting the full model first
full_model <- try({
lme(BA ~ Age_c + Age_squared_c,
random = list(playerID = pdDiag(~ Age_c + Age_squared_c)),
weights = varFixed(~ I(1/AB)),
data = data,
method = "REML",
control = lmeControl(opt = "optim",
maxIter = 200,
msMaxIter = 200,
returnObject = TRUE))
}, silent = TRUE)
# If full model fails, try simpler models
if (inherits(full_model, "try-error")) {
# Try random intercept and slope
model <- try({
lme(BA ~ Age_c + Age_squared_c,
random = list(playerID = pdDiag(~ Age_c)),
weights = varFixed(~ I(1/AB)),
data = data,
method = "REML",
control = lmeControl(opt = "optim",
maxIter = 200))
}, silent = TRUE)
# If that fails, try random intercept only
if (inherits(model, "try-error")) {
model <- try({
lme(BA ~ Age_c + Age_squared_c,
random = ~ 1 | playerID,
weights = varFixed(~ I(1/AB)),
data = data,
method = "REML",
control = lmeControl(opt = "optim"))
}, silent = TRUE)
if (inherits(model, "try-error")) {
stop("Unable to fit any model specification")
}
}
return(model)
}
return(full_model)
}
# Function to calculate peak age
calculate_peak_age <- function(model, data) {
fixed_effects <- fixed.effects(model)
beta_age <- fixed_effects["Age_c"]
beta_age2 <- fixed_effects["Age_squared_c"]
# Check if parabola opens downward (necessary for maximum)
if (beta_age2 >= 0) {
warning("Model suggests no peak age (parabola opens upward)")
return(NA)
}
peak_age <- -beta_age / (2 * beta_age2) + mean(data$Age)
return(peak_age)
}
# Function to create visualization
create_ba_plot <- function(model, data, peak_age) {
require(ggplot2)
# Create prediction data
age_range <- seq(min(data$Age), max(data$Age), by = 0.1)
age_range_c <- age_range - mean(data$Age)
age_squared_c <- age_range^2 - mean(data$Age_squared)
fixed_effects <- fixed.effects(model)
predicted_ba <- fixed_effects["(Intercept)"] +
fixed_effects["Age_c"] * age_range_c +
fixed_effects["Age_squared_c"] * age_squared_c
# Create plot
p <- ggplot() +
geom_line(data = data.frame(Age = age_range, BA = predicted_ba),
aes(x = Age, y = BA),
color = "red", linewidth = 1) +
geom_point(data = data,
aes(x = Age, y = BA, size = sqrt(AB)),
alpha = 0.1) +
labs(
title = "MLB Batting Average vs Age",
subtitle = paste("Population Average Curve (Red)",
ifelse(!is.na(peak_age),
paste("Peak Age:", round(peak_age, 2)),
"No Clear Peak Age")),
x = "Age",
y = "Batting Average",
size = "√At Bats"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
if (!is.na(peak_age)) {
p <- p + geom_vline(xintercept = peak_age,
linetype = "dashed",
color = "blue")
}
return(p)
}
# Main analysis function
analyze_batting_age <- function(mlb_data) {
# Clean and prepare data
clean_data <- clean_mlb_data(mlb_data)
clean_data <- compute_age_vars(clean_data)
# Fit model
model <- fit_mixed_model(clean_data)
# Calculate peak age
peak_age <- calculate_peak_age(model, clean_data)
# Create visualization
plot <- create_ba_plot(model, clean_data, peak_age)
# Return results
return(list(
model = model,
peak_age = peak_age,
plot = plot
))
}
# Usage
results <- analyze_batting_age(mlb_data)
library(lme4)
# Ensure that BA, Age, and Age_squared are in the data
mlb_data$BA <- mlb_data$H / mlb_data$AB
mlb_data$Age_squared <- mlb_data$Age^2
# Fit the mixed effects model with random intercept, slope, and quadratic term
mixed_model <- lmer(
BA ~ Age + Age_squared + (1 + Age + Age_squared | playerID),
data = mlb_data,
weights = AB,
control = lmerControl(optCtrl = list(maxfun = 100000))
)
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
library(lme4)
# Ensure that BA, Age, and Age_squared are in the data
mlb_data$BA <- mlb_data$H / mlb_data$AB
mlb_data$Age_squared <- mlb_data$Age^2
# Fit the mixed effects model with random intercept, slope, and quadratic term
mixed_model <- lmer(
BA ~ Age + Age_squared + (1 + Age + Age_squared | playerID),
data = mlb_data,
weights = AB,
control = lmerControl(optCtrl = list(maxfun = 100000))
)
install.packages("lme4")
library(Matrix)
library(lme4)
# Ensure that BA, Age, and Age_squared are in the data
mlb_data$BA <- mlb_data$H / mlb_data$AB
mlb_data$Age_squared <- mlb_data$Age^2
# Fit the mixed effects model with random intercept, slope, and quadratic term
mixed_model <- lmer(
BA ~ Age + Age_squared + (1 + Age + Age_squared | playerID),
data = mlb_data,
weights = AB,
control = lmerControl(optCtrl = list(maxfun = 100000))
)
install.packages("lme4")
remove.packages("Matrix")
install.packages("Matrix")
remove.packages("lme4")
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
library(Matrix)
data <- read.dta13('krueger_class_size.dta') # read in the data and store it as an object called class
data <- read.dta13('krueger_class_size.dta') # read in the data and store it as an object called class
library(pwr)
res1 <- pwr.t.test(d = 0.20, sig.level = 0.05, power = 0.80,
type = "two.sample", alternative = "two.sided")
res1
data <- read.dta13('krueger_class_size.dta') # read in the data and store it as an object called class
library(pwr)
res1 <- pwr.t.test(d = 0.20, sig.level = 0.05, power = 0.80,
type = "two.sample", alternative = "two.sided")
res1
res2 <- pwr.t.test(d = 0.10, sig.level = 0.05, power = 0.80,
type = "two.sample", alternative = "two.sided")
res2
m <- 250
icc <- 0.18
clusters <- 30
n_arm <- clusters * m
deff <- 1 + (m - 1) * icc
n_eff <- n_arm / deff
res3_cluster <- pwr.t.test(n = n_eff, sig.level = 0.05, power = 0.80,
type = "two.sample", alternative = "two.sided")
res3_indiv <- pwr.t.test(n = n_arm, sig.level = 0.05, power = 0.80,
type = "two.sample", alternative = "two.sided")
res3_cluster
res3_indiv
m <- 250
icc <- 0.18
clusters <- 30
n_arm <- clusters * m
deff <- 1 + (m - 1) * icc
n_eff <- n_arm / deff
res3_cluster <- pwr.t.test(n = n_eff, sig.level = 0.05, power = 0.80,
type = "two.sample", alternative = "two.sided")
res3_indiv <- pwr.t.test(n = n_arm, sig.level = 0.05, power = 0.80,
type = "two.sample", alternative = "two.sided")
res3_cluster
res3_indiv
data$cltype1 <- factor(data$cltype1, labels = c("regular", "small", "regular_aide"))
data$trace1 <- as.factor(data$trace1)
reg_aa <- lm(pmath1g ~ I(trace1 == "African American") + factor(schid1n), data = data, subset = (black == 1))
options(repos = c(CRAN = "https://cloud.r-project.org"))
rm(list = ls()) # clear the workspace
# first run
install.packages(c('readstata13', 'sandwich', 'lmtest', 'pwr')) # need to install every new package before librarying it
install.packages("TeachingDemos", repos="http://R-Forge.R-project.org")
