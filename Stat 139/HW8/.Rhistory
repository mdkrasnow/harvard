if (beta_age2 >= 0) {
warning("Model suggests no peak age (parabola opens upward)")
return(NA)
}
peak_age <- -beta_age / (2 * beta_age2) + mean(data$Age)
return(peak_age)
}
# Function to create visualization
create_ba_plot <- function(model, data, peak_age) {
require(ggplot2)
# Create prediction data
age_range <- seq(min(data$Age), max(data$Age), by = 0.1)
age_range_c <- age_range - mean(data$Age)
age_squared_c <- age_range^2 - mean(data$Age_squared)
fixed_effects <- fixed.effects(model)
predicted_ba <- fixed_effects["(Intercept)"] +
fixed_effects["Age_c"] * age_range_c +
fixed_effects["Age_squared_c"] * age_squared_c
# Create plot
p <- ggplot() +
geom_line(data = data.frame(Age = age_range, BA = predicted_ba),
aes(x = Age, y = BA),
color = "red", linewidth = 1) +
geom_point(data = data,
aes(x = Age, y = BA, size = sqrt(AB)),
alpha = 0.1) +
labs(
title = "MLB Batting Average vs Age",
subtitle = paste("Population Average Curve (Red)",
ifelse(!is.na(peak_age),
paste("Peak Age:", round(peak_age, 2)),
"No Clear Peak Age")),
x = "Age",
y = "Batting Average",
size = "âˆšAt Bats"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5)
)
if (!is.na(peak_age)) {
p <- p + geom_vline(xintercept = peak_age,
linetype = "dashed",
color = "blue")
}
return(p)
}
# Main analysis function
analyze_batting_age <- function(mlb_data) {
# Clean and prepare data
clean_data <- clean_mlb_data(mlb_data)
clean_data <- compute_age_vars(clean_data)
# Fit model
model <- fit_mixed_model(clean_data)
# Calculate peak age
peak_age <- calculate_peak_age(model, clean_data)
# Create visualization
plot <- create_ba_plot(model, clean_data, peak_age)
# Return results
return(list(
model = model,
peak_age = peak_age,
plot = plot
))
}
# Usage
results <- analyze_batting_age(mlb_data)
library(lme4)
# Ensure that BA, Age, and Age_squared are in the data
mlb_data$BA <- mlb_data$H / mlb_data$AB
mlb_data$Age_squared <- mlb_data$Age^2
# Fit the mixed effects model with random intercept, slope, and quadratic term
mixed_model <- lmer(
BA ~ Age + Age_squared + (1 + Age + Age_squared | playerID),
data = mlb_data,
weights = AB,
control = lmerControl(optCtrl = list(maxfun = 100000))
)
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
library(lme4)
# Ensure that BA, Age, and Age_squared are in the data
mlb_data$BA <- mlb_data$H / mlb_data$AB
mlb_data$Age_squared <- mlb_data$Age^2
# Fit the mixed effects model with random intercept, slope, and quadratic term
mixed_model <- lmer(
BA ~ Age + Age_squared + (1 + Age + Age_squared | playerID),
data = mlb_data,
weights = AB,
control = lmerControl(optCtrl = list(maxfun = 100000))
)
install.packages("lme4")
library(Matrix)
library(lme4)
# Ensure that BA, Age, and Age_squared are in the data
mlb_data$BA <- mlb_data$H / mlb_data$AB
mlb_data$Age_squared <- mlb_data$Age^2
# Fit the mixed effects model with random intercept, slope, and quadratic term
mixed_model <- lmer(
BA ~ Age + Age_squared + (1 + Age + Age_squared | playerID),
data = mlb_data,
weights = AB,
control = lmerControl(optCtrl = list(maxfun = 100000))
)
install.packages("lme4")
remove.packages("Matrix")
install.packages("Matrix")
remove.packages("lme4")
install.packages("lme4")
install.packages("lme4")
install.packages("lme4")
library(Matrix)
# Load required packages
library(tidyr)
version
install.packages("lme4")
install.packages("Matrix")
library(Matrix)
library(lme4)
# Ensure that BA, Age, and Age_squared are in the data
mlb_data$BA <- mlb_data$H / mlb_data$AB
# Load required packages
library(tidyr)
mlb_data$BA <- mlb_data$H / mlb_data$AB
# Load required packages
library(tidyr)
# Load required packages
install.packages("tidyr")
library(tidyr)
library(dplyr)
library(readr)
# Load required packages
install.packages("tidyr")
library(tidyr)
library(dplyr)
install.packages("readr")
install.packages("tidyr")
library(readr)
library(ggplot2)
# Load required packages
install.packages("tidyr")
library(tidyr)
library(dplyr)
install.packages("readr")
library(readr)
install.packages("ggplot2")
library(ggplot2)
install.packages("nlme")
library(nlme)
install.packages("tidyverse")
install.packages("tidyr")
# Load required packages
install.packages("tidyr")
library(tidyr)
library(dplyr)
install.packages("readr")
library(readr)
install.packages("ggplot2")
library(ggplot2)
install.packages("nlme")
library(nlme)
install.packages("tidyverse")
library(tidyverse)
# Read the data
growth_data <- read_csv("data/growth.csv")
library(tidyr)
library(dplyr)
library(readr)
library(ggplot2)
library(nlme)
library(tidyverse)
# Read the data
growth_data <- read_csv("data/growth.csv")
#  wide to long
growth_long <- growth_data %>%
pivot_longer(
cols = starts_with("distance_"),
names_to = "age",
values_to = "distance",
# get numeric age from column names
names_prefix = "distance_"
) %>%
# change age to numeric
mutate(age = as.numeric(age)) %>%
# Arrange by subject ID and age
arrange(subjid, age)
head(growth_long)
# GORGEOUS!!@!@@!
ggplot(growth_long, aes(x = age, y = distance, group = subjid)) +
#map color here
geom_line(aes(color = sex), alpha = 0.3) +
geom_point(aes(color = sex), size = 2) +
# mean traj
stat_summary(aes(group = sex, color = sex),
fun = mean,
geom = "line",
linewidth = 1.5) +
scale_color_manual(values = c("F" = "#FF69B4", "M" = "#4169E1")) +
#x
scale_x_continuous(breaks = c(8, 10, 12, 14)) +
labs(
title = "Longitudinal Growth Patterns by Sex",
x = "Age (years)",
y = "Pituitary to Pteryomaxillary Distance (mm)",
color = "Sex"
) +
theme_minimal() +
theme(
legend.position = "top",
panel.grid.minor = element_blank()
)
growth_long <- growth_long %>%
mutate(age_centered = age - mean(age))
# Model 1: Random Intercept only
m1 <- lme(distance ~ age_centered * sex,
random = ~ 1 | subjid,
data = growth_long,
method = "ML")  # Using ML for AIC/BIC comparison
# Model 2: Independent Random Intercept and Slope
m2 <- lme(distance ~ age_centered * sex,
random = list(subjid = pdDiag(~ 1 + age_centered)),
data = growth_long,
method = "ML")
# Model 3: Correlated Random Intercept and Slope
m3 <- lme(distance ~ age_centered * sex,
random = ~ age_centered | subjid,
data = growth_long,
method = "ML")
# Compare models using AIC and BIC
models_comparison <- data.frame(
Model = c("Random Intercept",
"Independent Random Intercept & Slope",
"Correlated Random Intercept & Slope"),
AIC = c(AIC(m1), AIC(m2), AIC(m3)),
BIC = c(BIC(m1), BIC(m2), BIC(m3))
)
# View comparison
print(models_comparison)
mean_age <- mean(growth_long$age)
new_data <- expand.grid(
age_centered = seq(min(growth_long$age_centered),
max(growth_long$age_centered),
length.out = 100),
sex = c("F", "M")
) %>%
mutate(age = age_centered + mean_age)
new_data$predicted <- predict(m1, newdata = new_data, level = 0)
ggplot() +
geom_line(data = growth_long,
aes(x = age, y = distance, group = subjid, color = sex),
alpha = 0.3) +
geom_point(data = growth_long,
aes(x = age, y = distance, color = sex),
size = 2) +
geom_line(data = new_data,
aes(x = age, y = predicted, color = sex),
linewidth = 1.5,
linetype = "dashed") +
scale_color_manual(values = c("F" = "#FF69B4", "M" = "#4169E1")) +
scale_x_continuous(breaks = c(8, 10, 12, 14)) +
labs(
title = "Longitudinal Growth Patterns by Sex",
subtitle = "dashed lines show pjopulation average trends from random intercept model",
x = "Age (years)",
y = "Pituitary to Pteryomaxillary Distance (mm)",
color = "Sex"
) +
theme_minimal() +
theme(
legend.position = "top",
panel.grid.minor = element_blank()
)
growth_long <- growth_long %>%
mutate(age_birth = age - 0)  # age centered at birth
# Fit model with age centered at birth using nlme
m1_birth <- lme(distance ~ age_birth * sex,
random = ~ 1 | subjid,
data = growth_long,
method = "REML")  # Use REML for inference
# Extract summary with test statistics
summary(m1_birth)
# Get confidence intervals
intervals(m1_birth, which = "fixed")
mlb_data <- read_csv("data/mlbdata.csv")
# (a) Number of unique players
n_players <- length(unique(mlb_data$playerID))
cat("Number of unique players:", n_players, "\n")
# Create histogram of Age
ggplot(mlb_data, aes(x = Age)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(
title = "Distribution of Player Ages in MLB (1980-2021)",
x = "Age",
y = "Frequency"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
career_stats <- mlb_data %>%
group_by(playerID) %>%
summarise(
years_played = n_distinct(yearID),
career_ba = sum(H) / sum(AB)
)
# years played
p1 <- ggplot(career_stats, aes(x = years_played)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(
title = "Distribution of MLB Career Lengths (1980-2021)",
x = "Years Played",
y = "Number of Players"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
#batting average vs years played
p2 <- ggplot(career_stats, aes(x = years_played, y = career_ba)) +
geom_point(alpha = 0.5, color = "steelblue") +
labs(
title = "Career Batting Average vs Career Length",
x = "Years Played",
y = "Career Batting Average"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
library(gridExtra)
career_stats <- mlb_data %>%
group_by(playerID) %>%
summarise(
years_played = n_distinct(yearID),
career_ba = sum(H) / sum(AB)
)
# years played
p1 <- ggplot(career_stats, aes(x = years_played)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(
title = "Distribution of MLB Career Lengths (1980-2021)",
x = "Years Played",
y = "Number of Players"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
#batting average vs years played
p2 <- ggplot(career_stats, aes(x = years_played, y = career_ba)) +
geom_point(alpha = 0.5, color = "steelblue") +
labs(
title = "Career Batting Average vs Career Length",
x = "Years Played",
y = "Career Batting Average"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
grid.arrange(p1, p2, ncol = 2)
career_stats <- mlb_data %>%
group_by(playerID) %>%
summarise(
years_played = n_distinct(yearID),
career_ba = sum(H) / sum(AB)
)
# years played
p1 <- ggplot(career_stats, aes(x = years_played)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(
title = "Distribution of MLB Career Lengths (1980-2021)",
x = "Years Played",
y = "Number of Players"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
#batting average vs years played
p2 <- ggplot(career_stats, aes(x = years_played, y = career_ba)) +
geom_point(alpha = 0.5, color = "steelblue") +
labs(
title = "Career Batting Average vs Career Length",
x = "Years Played",
y = "Career Batting Average"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
install.packages("gridExtra")
library(gridExtra)
grid.arrange(p1, p2, ncol = 2)
mlb_data$BA <- mlb_data$H / mlb_data$AB
mlb_data$Age_squared <- mlb_data$Age^2
quad_model <- lm(BA ~ Age + Age_squared,
data = mlb_data,
weights = AB)
summary(quad_model)
beta_age <- coef(quad_model)[2]
beta_age2 <- coef(quad_model)[3]
peak_age <- -beta_age / (2 * beta_age2)
cat("\nPeak batting average occurs at age:", round(peak_age, 2))
age_range <- seq(min(mlb_data$Age), max(mlb_data$Age), by = 0.1)
predicted_ba <- predict(quad_model,
newdata = data.frame(Age = age_range,
Age_squared = age_range^2))
ggplot(mlb_data, aes(x = Age, y = BA)) +
geom_point(alpha = 0.1, aes(size = AB)) +  # Raw data points, sized by AB
geom_line(data = data.frame(Age = age_range, BA = predicted_ba),
color = "red", size = 1) +  # Fitted curve
geom_vline(xintercept = peak_age, linetype = "dashed", color = "blue") +  # Peak age
labs(
title = "Batting Average vs Age with Quadratic Fit",
x = "Age",
y = "Batting Average",
size = "At Bats"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
axis.text = element_text(size = 10),
axis.title = element_text(size = 12)
)
install.packages("lme4")
install.packages("Matrix")
library(Matrix)
library(lme4)
# Ensure that BA, Age, and Age_squared are in the data
mlb_data$BA <- mlb_data$H / mlb_data$AB
mlb_data$Age_squared <- mlb_data$Age^2
# Fit the mixed effects model with random intercept, slope, and quadratic term
mixed_model <- lmer(
BA ~ Age + Age_squared + (1 + Age + Age_squared | playerID),
data = mlb_data,
weights = AB,
control = lmerControl(optCtrl = list(maxfun = 100000))
)
# Display the summary of the model
summary(mixed_model)
library(Matrix)
library(lme4)
# Ensure that BA, Age, and Age_squared are in the data
mlb_data$BA <- mlb_data$H / mlb_data$AB
mlb_data$Age_squared <- mlb_data$Age^2
# Fit the mixed effects model with random intercept, slope, and quadratic term
mixed_model <- lmer(
BA ~ Age + Age_squared + (1 + Age + Age_squared | playerID),
data = mlb_data,
weights = AB,
control = lmerControl(optCtrl = list(maxfun = 100000))
)
# Display the summary of the model
summary(mixed_model)
# 1. Extract coefficients
# Simple quadratic model coefficients (from part c)
simple_coef <- c(0.2088, 0.003527, -0.00005529)
# Mixed effects model coefficients (from part d)
mixed_coef <- c(-0.4505, 0.05287, -0.0009936)
# 2. Create age sequence for prediction
age_seq <- seq(18, 45, by = 0.1)
# 3. Function to calculate predicted BA
predict_ba <- function(age, coef) {
coef[1] + coef[2] * age + coef[3] * age^2
}
# 4. Calculate predictions
mixed_pred <- predict_ba(age_seq, mixed_coef)
simple_pred <- predict_ba(age_seq, simple_coef)
# 5. Calculate peaks
calc_peak <- function(coef) {
-coef[2] / (2 * coef[3])
}
mixed_peak <- calc_peak(mixed_coef)
simple_peak <- calc_peak(simple_coef)
# 6. Create plot
ggplot() +
geom_line(aes(x = age_seq, y = mixed_pred, color = "Mixed Model"), size = 1) +
geom_line(aes(x = age_seq, y = simple_pred, color = "Simple Quadratic"), size = 1) +
geom_vline(xintercept = mixed_peak, linetype = "dashed", color = "blue") +
geom_vline(xintercept = simple_peak, linetype = "dashed", color = "red") +
labs(
title = "Comparison of Career Arcs: Mixed vs Simple Quadratic Models",
x = "Age",
y = "Predicted Batting Average",
color = "Model Type"
) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5),
legend.position = "bottom"
) +
scale_color_manual(values = c("Mixed Model" = "blue", "Simple Quadratic" = "red"))
# Print peak ages
cat("Peak age (Mixed Model):", round(mixed_peak, 2), "\n")
cat("Peak age (Simple Quadratic):", round(simple_peak, 2), "\n")
